/*
 * trace.coolidge-v2.dev
 * Automatically generated from registers definition files. Do not edit
 * Copyright (c) Kalray 2022.
 */

#ifndef _INCLUDED_DEVICES_TRACE_COOLIDGE_V2_DEV_
#define _INCLUDED_DEVICES_TRACE_COOLIDGE_V2_DEV_

#include "device_inttype.h"


struct mppa_trace_etb_entry {
mppa_uint64 etb_entry :64; /*[63: 0]behavior: [:RD],Embedded Trace Buffer entry*/
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_etb_entry[(sizeof(struct mppa_trace_etb_entry) == 8)*2-1];// If this fails, then the size of struct mppa_trace_etb_entry as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_ETB_ENTRY_ETB_ENTRY__SHIFT 0
#define MPPA_TRACE_ETB_ENTRY_ETB_ENTRY__MASK 0xffffffffffffffffULL


/***
 * trace etb_entry register definition
 * ETB 64b entry.
 *
 * Permissions:
 * RM: ker => [:RD],
 * RM: usr => [:RD],
 * PE: ker => [:RD],
 * PE: usr => [:RD],
 * Size: 8 bytes (min access size = 8 bytes)
 * Reset value: Not initialized
 */
typedef union {
mppa_uint64 reg;
mppa_uint64 dword;
struct mppa_trace_etb_entry _;
} mppa_trace_etb_entry_t;

struct mppa_trace_timestamp_value {
mppa_uint64 timestamp_value :64; /*[63: 0]reset: 0x0,behavior: [:RD, :WR],Timestamp register 64b*/
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_timestamp_value[(sizeof(struct mppa_trace_timestamp_value) == 8)*2-1];// If this fails, then the size of struct mppa_trace_timestamp_value as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_TIMESTAMP_VALUE_TIMESTAMP_VALUE__SHIFT 0
#define MPPA_TRACE_TIMESTAMP_VALUE_TIMESTAMP_VALUE__MASK 0xffffffffffffffffULL


/***
 * trace timestamp_value register definition
 * Timestamp Value Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 8 bytes (min access size = 8 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint64 reg;
mppa_uint64 dword;
struct mppa_trace_timestamp_value _;
} mppa_trace_timestamp_value_t;

struct mppa_trace_timestamp_wrap {
mppa_uint32 timestamp_wrap :1; /*[ 0: 0]reset: 0x0,behavior: [:RD, :WR],Sticky bit. Set when timestamp counter wraps.*/
mppa_uint32 reserved_1:31;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_timestamp_wrap[(sizeof(struct mppa_trace_timestamp_wrap) == 4)*2-1];// If this fails, then the size of struct mppa_trace_timestamp_wrap as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_TIMESTAMP_WRAP_TIMESTAMP_WRAP__SHIFT 0
#define MPPA_TRACE_TIMESTAMP_WRAP_TIMESTAMP_WRAP__MASK 0x1UL


/***
 * trace timestamp_wrap register definition
 * Timestamp status register
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_timestamp_wrap _;
} mppa_trace_timestamp_wrap_t;

struct mppa_trace_timestamp_format {
mppa_uint32 timestamp_mode :1; /*[ 0: 0]reset: 0x0,behavior: [:RD, :WR],Timestamp format control bit:
0 - incremental mode of operation,
1 - absolute mode of operation
*/
mppa_uint32 timestamp_size :1; /*[ 1: 1]reset: 0x0,behavior: [:RD, :WR],Timestamp size control bit (only active in absolute mode of operation):
0 - 32-bit wide timestamp,
1 - 64-bit wide timestamp
*/
mppa_uint32 reserved_1:30;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_timestamp_format[(sizeof(struct mppa_trace_timestamp_format) == 4)*2-1];// If this fails, then the size of struct mppa_trace_timestamp_format as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_TIMESTAMP_FORMAT_TIMESTAMP_MODE__SHIFT 0
#define MPPA_TRACE_TIMESTAMP_FORMAT_TIMESTAMP_MODE__MASK 0x1UL
#define MPPA_TRACE_TIMESTAMP_FORMAT_TIMESTAMP_SIZE__SHIFT 1
#define MPPA_TRACE_TIMESTAMP_FORMAT_TIMESTAMP_SIZE__MASK 0x2UL


/***
 * trace timestamp_format register definition
 * Timestamp control register
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_timestamp_format _;
} mppa_trace_timestamp_format_t;

struct mppa_trace_formatter_enable {
mppa_uint32 formatter_enable_0 :1; /*[ 0: 0]reset: 0x0,behavior: [:RD, :WR],Enable bit for Data Formatter 0*/
mppa_uint32 formatter_enable_1 :1; /*[ 1: 1]reset: 0x0,behavior: [:RD, :WR],Enable bit for Data Formatter 1*/
mppa_uint32 formatter_enable_2 :1; /*[ 2: 2]reset: 0x0,behavior: [:RD, :WR],Enable bit for Data Formatter 2*/
mppa_uint32 formatter_enable_3 :1; /*[ 3: 3]reset: 0x0,behavior: [:RD, :WR],Enable bit for Data Formatter 3*/
mppa_uint32 formatter_enable_4 :1; /*[ 4: 4]reset: 0x0,behavior: [:RD, :WR],Enable bit for Data Formatter 4*/
mppa_uint32 reserved_1:27;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_formatter_enable[(sizeof(struct mppa_trace_formatter_enable) == 4)*2-1];// If this fails, then the size of struct mppa_trace_formatter_enable as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_FORMATTER_ENABLE_FORMATTER_ENABLE_0__SHIFT 0
#define MPPA_TRACE_FORMATTER_ENABLE_FORMATTER_ENABLE_0__MASK 0x1UL
#define MPPA_TRACE_FORMATTER_ENABLE_FORMATTER_ENABLE_1__SHIFT 1
#define MPPA_TRACE_FORMATTER_ENABLE_FORMATTER_ENABLE_1__MASK 0x2UL
#define MPPA_TRACE_FORMATTER_ENABLE_FORMATTER_ENABLE_2__SHIFT 2
#define MPPA_TRACE_FORMATTER_ENABLE_FORMATTER_ENABLE_2__MASK 0x4UL
#define MPPA_TRACE_FORMATTER_ENABLE_FORMATTER_ENABLE_3__SHIFT 3
#define MPPA_TRACE_FORMATTER_ENABLE_FORMATTER_ENABLE_3__MASK 0x8UL
#define MPPA_TRACE_FORMATTER_ENABLE_FORMATTER_ENABLE_4__SHIFT 4
#define MPPA_TRACE_FORMATTER_ENABLE_FORMATTER_ENABLE_4__MASK 0x10UL


/***
 * trace formatter_enable register definition
 * Data formatter Control Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_formatter_enable _;
} mppa_trace_formatter_enable_t;

struct mppa_trace_formatter_flush {
mppa_uint32 formatter_flush_0 :1; /*[ 0: 0]reset: 0x0,behavior: [:RD, :WR],Flush Enable bit for Data Formatter 0*/
mppa_uint32 formatter_flush_1 :1; /*[ 1: 1]reset: 0x0,behavior: [:RD, :WR],Flush Enable bit for Data Formatter 1*/
mppa_uint32 formatter_flush_2 :1; /*[ 2: 2]reset: 0x0,behavior: [:RD, :WR],Flush Enable bit for Data Formatter 2*/
mppa_uint32 formatter_flush_3 :1; /*[ 3: 3]reset: 0x0,behavior: [:RD, :WR],Flush Enable bit for Data Formatter 3*/
mppa_uint32 formatter_flush_4 :1; /*[ 4: 4]reset: 0x0,behavior: [:RD, :WR],Flush Enable bit for Data Formatter 4*/
mppa_uint32 reserved_1:27;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_formatter_flush[(sizeof(struct mppa_trace_formatter_flush) == 4)*2-1];// If this fails, then the size of struct mppa_trace_formatter_flush as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_FORMATTER_FLUSH_FORMATTER_FLUSH_0__SHIFT 0
#define MPPA_TRACE_FORMATTER_FLUSH_FORMATTER_FLUSH_0__MASK 0x1UL
#define MPPA_TRACE_FORMATTER_FLUSH_FORMATTER_FLUSH_1__SHIFT 1
#define MPPA_TRACE_FORMATTER_FLUSH_FORMATTER_FLUSH_1__MASK 0x2UL
#define MPPA_TRACE_FORMATTER_FLUSH_FORMATTER_FLUSH_2__SHIFT 2
#define MPPA_TRACE_FORMATTER_FLUSH_FORMATTER_FLUSH_2__MASK 0x4UL
#define MPPA_TRACE_FORMATTER_FLUSH_FORMATTER_FLUSH_3__SHIFT 3
#define MPPA_TRACE_FORMATTER_FLUSH_FORMATTER_FLUSH_3__MASK 0x8UL
#define MPPA_TRACE_FORMATTER_FLUSH_FORMATTER_FLUSH_4__SHIFT 4
#define MPPA_TRACE_FORMATTER_FLUSH_FORMATTER_FLUSH_4__MASK 0x10UL


/***
 * trace formatter_flush register definition
 * Data formatter Flush Control Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_formatter_flush _;
} mppa_trace_formatter_flush_t;

struct mppa_trace_low_speed_trace_mode {
mppa_uint32 low_speed_enable :1; /*[ 0: 0]reset: 0x0,behavior: [:RD, :WR],Low speed parallel port enable*/
mppa_uint32 low_speed_trace_mode :2; /*[ 2: 1]reset: 0x0,behavior: [:RD, :WR],Low speed parallel port mode of operation:
2'b00 - 16 bit wide low speed parallel port,
2'b01 - 8  bit wide low speed parallel port,
2'b1X - 4  bit wide low speed parallel port
*/
mppa_uint32 reserved_1:29;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_low_speed_trace_mode[(sizeof(struct mppa_trace_low_speed_trace_mode) == 4)*2-1];// If this fails, then the size of struct mppa_trace_low_speed_trace_mode as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_LOW_SPEED_TRACE_MODE_LOW_SPEED_ENABLE__SHIFT 0
#define MPPA_TRACE_LOW_SPEED_TRACE_MODE_LOW_SPEED_ENABLE__MASK 0x1UL
#define MPPA_TRACE_LOW_SPEED_TRACE_MODE_LOW_SPEED_TRACE_MODE__SHIFT 1
#define MPPA_TRACE_LOW_SPEED_TRACE_MODE_LOW_SPEED_TRACE_MODE__MASK 0x6UL


/***
 * trace low_speed_trace_mode register definition
 * Low Speed Parallel Port Control Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_low_speed_trace_mode _;
} mppa_trace_low_speed_trace_mode_t;

struct mppa_trace_high_speed_bit_ordering {
mppa_uint32 high_speed_bit_ordering :1; /*[ 0: 0]reset: 0x0,behavior: [:RD, :WR],High speed serial port bit ordering:
0 - bit ordering from the input is preserved,
1 - bit ordering is reversed in each byte
*/
mppa_uint32 reserved_1:31;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_high_speed_bit_ordering[(sizeof(struct mppa_trace_high_speed_bit_ordering) == 4)*2-1];// If this fails, then the size of struct mppa_trace_high_speed_bit_ordering as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_HIGH_SPEED_BIT_ORDERING_HIGH_SPEED_BIT_ORDERING__SHIFT 0
#define MPPA_TRACE_HIGH_SPEED_BIT_ORDERING_HIGH_SPEED_BIT_ORDERING__MASK 0x1UL


/***
 * trace high_speed_bit_ordering register definition
 * High Speed Serial Port Control Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_high_speed_bit_ordering _;
} mppa_trace_high_speed_bit_ordering_t;

struct mppa_trace_etb_control {
mppa_uint32 etb_enable :1; /*[ 0: 0]reset: 0x0,behavior: [:RD, :WR],Embedded TRACE Buffer Enable bit:
0 - ETB Disabled,
1 - ETB Enabled
*/
mppa_uint32 etb_mode :1; /*[ 1: 1]reset: 0x0,behavior: [:RD, :WR],Embedded TRACE Buffer Mode of operation:
0 - ETB in continuous mode of operation,
1 - ETB in single mode of operation
*/
mppa_uint32 reserved_1:30;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_etb_control[(sizeof(struct mppa_trace_etb_control) == 4)*2-1];// If this fails, then the size of struct mppa_trace_etb_control as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_ETB_CONTROL_ETB_ENABLE__SHIFT 0
#define MPPA_TRACE_ETB_CONTROL_ETB_ENABLE__MASK 0x1UL
#define MPPA_TRACE_ETB_CONTROL_ETB_MODE__SHIFT 1
#define MPPA_TRACE_ETB_CONTROL_ETB_MODE__MASK 0x2UL


/***
 * trace etb_control register definition
 * Embedded TRACE Buffer Control Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_etb_control _;
} mppa_trace_etb_control_t;

struct mppa_trace_etb_head_pointer {
mppa_uint32 etb_head_pointer :15; /*[14: 0]reset: 0x0,behavior: [:RD, :WR],Embedded TRACE Buffer Head pointer*/
mppa_uint32 reserved_1:17;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_etb_head_pointer[(sizeof(struct mppa_trace_etb_head_pointer) == 4)*2-1];// If this fails, then the size of struct mppa_trace_etb_head_pointer as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_ETB_HEAD_POINTER_ETB_HEAD_POINTER__SHIFT 0
#define MPPA_TRACE_ETB_HEAD_POINTER_ETB_HEAD_POINTER__MASK 0x7fffUL


/***
 * trace etb_head_pointer register definition
 * Embedded TRACE Buffer Head pointer Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_etb_head_pointer _;
} mppa_trace_etb_head_pointer_t;

struct mppa_trace_etb_tail_pointer {
mppa_uint32 etb_tail_pointer :15; /*[14: 0]reset: 0x0,behavior: [:RD, :WR],Embedded TRACE Buffer Tail pointer*/
mppa_uint32 reserved_1:17;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_etb_tail_pointer[(sizeof(struct mppa_trace_etb_tail_pointer) == 4)*2-1];// If this fails, then the size of struct mppa_trace_etb_tail_pointer as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_ETB_TAIL_POINTER_ETB_TAIL_POINTER__SHIFT 0
#define MPPA_TRACE_ETB_TAIL_POINTER_ETB_TAIL_POINTER__MASK 0x7fffUL


/***
 * trace etb_tail_pointer register definition
 * Embedded TRACE Buffer Tail pointer Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_etb_tail_pointer _;
} mppa_trace_etb_tail_pointer_t;

struct mppa_trace_etb_filling_thresh {
mppa_uint32 etb_filling_thresh :15; /*[14: 0]reset: 0x0,behavior: [:RD, :WR],Embedded TRACE Buffer filling threshold Register*/
mppa_uint32 reserved_1:17;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_etb_filling_thresh[(sizeof(struct mppa_trace_etb_filling_thresh) == 4)*2-1];// If this fails, then the size of struct mppa_trace_etb_filling_thresh as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_ETB_FILLING_THRESH_ETB_FILLING_THRESH__SHIFT 0
#define MPPA_TRACE_ETB_FILLING_THRESH_ETB_FILLING_THRESH__MASK 0x7fffUL


/***
 * trace etb_watermark_pointer register definition
 * Embedded TRACE Buffer filling threshold Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_etb_filling_thresh _;
} mppa_trace_etb_watermark_pointer_t;

struct mppa_trace_etb_wmark_it {
mppa_uint32 etb_wmark_it :1; /*[ 0: 0]reset: 0x0,behavior: [:RD, :WR],Embedded Watermark Interrupt bit:
1 - ETB Wmark IT set
0 - ETB Wmark IT clear
*/
mppa_uint32 reserved_1:31;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_etb_wmark_it[(sizeof(struct mppa_trace_etb_wmark_it) == 4)*2-1];// If this fails, then the size of struct mppa_trace_etb_wmark_it as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_ETB_WMARK_IT_ETB_WMARK_IT__SHIFT 0
#define MPPA_TRACE_ETB_WMARK_IT_ETB_WMARK_IT__MASK 0x1UL


/***
 * trace etb_wmark_it register definition
 * Embedded Watermark Interrupt Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_etb_wmark_it _;
} mppa_trace_etb_wmark_it_t;

struct mppa_trace_trace_sw_hw_sel {
mppa_uint32 trace_sw_hw_sel_0 :1; /*[ 0: 0]reset: 0x1,behavior: [:RD, :WR],Trace select bit for Cluster 0 (0: HW, 1: SW)*/
mppa_uint32 trace_sw_hw_sel_1 :1; /*[ 1: 1]reset: 0x1,behavior: [:RD, :WR],Trace select bit for Cluster 1 (0: HW, 1: SW)*/
mppa_uint32 trace_sw_hw_sel_2 :1; /*[ 2: 2]reset: 0x1,behavior: [:RD, :WR],Trace select bit for Cluster 2 (0: HW, 1: SW)*/
mppa_uint32 trace_sw_hw_sel_3 :1; /*[ 3: 3]reset: 0x1,behavior: [:RD, :WR],Trace select bit for Cluster 3 (0: HW, 1: SW)*/
mppa_uint32 trace_sw_hw_sel_4 :1; /*[ 4: 4]reset: 0x1,behavior: [:RD, :WR],Trace select bit for Cluster 4 (0: HW, 1: SW)*/
mppa_uint32 reserved_1:27;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_trace_sw_hw_sel[(sizeof(struct mppa_trace_trace_sw_hw_sel) == 4)*2-1];// If this fails, then the size of struct mppa_trace_trace_sw_hw_sel as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_TRACE_SW_HW_SEL_TRACE_SW_HW_SEL_0__SHIFT 0
#define MPPA_TRACE_TRACE_SW_HW_SEL_TRACE_SW_HW_SEL_0__MASK 0x1UL
#define MPPA_TRACE_TRACE_SW_HW_SEL_TRACE_SW_HW_SEL_1__SHIFT 1
#define MPPA_TRACE_TRACE_SW_HW_SEL_TRACE_SW_HW_SEL_1__MASK 0x2UL
#define MPPA_TRACE_TRACE_SW_HW_SEL_TRACE_SW_HW_SEL_2__SHIFT 2
#define MPPA_TRACE_TRACE_SW_HW_SEL_TRACE_SW_HW_SEL_2__MASK 0x4UL
#define MPPA_TRACE_TRACE_SW_HW_SEL_TRACE_SW_HW_SEL_3__SHIFT 3
#define MPPA_TRACE_TRACE_SW_HW_SEL_TRACE_SW_HW_SEL_3__MASK 0x8UL
#define MPPA_TRACE_TRACE_SW_HW_SEL_TRACE_SW_HW_SEL_4__SHIFT 4
#define MPPA_TRACE_TRACE_SW_HW_SEL_TRACE_SW_HW_SEL_4__MASK 0x10UL


/***
 * trace trace_sw_hw_sel register definition
 * Select between the Trace PC (HW) and the Trace Application (SW).
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x1F
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_trace_sw_hw_sel _;
} mppa_trace_trace_sw_hw_sel_t;

struct mppa_trace_formatter_flush_hw {
mppa_uint32 formatter_flush_hw_0 :1; /*[ 0: 0]reset: 0x0,behavior: [:RD, :WR],Flush Enable bit for Data Formatter_hw 0*/
mppa_uint32 formatter_flush_hw_1 :1; /*[ 1: 1]reset: 0x0,behavior: [:RD, :WR],Flush Enable bit for Data Formatter_hw 1*/
mppa_uint32 formatter_flush_hw_2 :1; /*[ 2: 2]reset: 0x0,behavior: [:RD, :WR],Flush Enable bit for Data Formatter_hw 2*/
mppa_uint32 formatter_flush_hw_3 :1; /*[ 3: 3]reset: 0x0,behavior: [:RD, :WR],Flush Enable bit for Data Formatter_hw 3*/
mppa_uint32 formatter_flush_hw_4 :1; /*[ 4: 4]reset: 0x0,behavior: [:RD, :WR],Flush Enable bit for Data Formatter_hw 4*/
mppa_uint32 reserved_1:27;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_formatter_flush_hw[(sizeof(struct mppa_trace_formatter_flush_hw) == 4)*2-1];// If this fails, then the size of struct mppa_trace_formatter_flush_hw as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_FORMATTER_FLUSH_HW_FORMATTER_FLUSH_HW_0__SHIFT 0
#define MPPA_TRACE_FORMATTER_FLUSH_HW_FORMATTER_FLUSH_HW_0__MASK 0x1UL
#define MPPA_TRACE_FORMATTER_FLUSH_HW_FORMATTER_FLUSH_HW_1__SHIFT 1
#define MPPA_TRACE_FORMATTER_FLUSH_HW_FORMATTER_FLUSH_HW_1__MASK 0x2UL
#define MPPA_TRACE_FORMATTER_FLUSH_HW_FORMATTER_FLUSH_HW_2__SHIFT 2
#define MPPA_TRACE_FORMATTER_FLUSH_HW_FORMATTER_FLUSH_HW_2__MASK 0x4UL
#define MPPA_TRACE_FORMATTER_FLUSH_HW_FORMATTER_FLUSH_HW_3__SHIFT 3
#define MPPA_TRACE_FORMATTER_FLUSH_HW_FORMATTER_FLUSH_HW_3__MASK 0x8UL
#define MPPA_TRACE_FORMATTER_FLUSH_HW_FORMATTER_FLUSH_HW_4__SHIFT 4
#define MPPA_TRACE_FORMATTER_FLUSH_HW_FORMATTER_FLUSH_HW_4__MASK 0x10UL


/***
 * trace formatter_flush_hw register definition
 * Data formatter_hw Flush Control Register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_formatter_flush_hw _;
} mppa_trace_formatter_flush_hw_t;

struct mppa_trace_timestamp_hw_enable {
mppa_uint32 timestamp_hw_enable :1; /*[ 0: 0]reset: 0x0,behavior: [:RD, :WR],Enable the global Trace PC timestamp.*/
mppa_uint32 reserved_1:31;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_trace_timestamp_hw_enable[(sizeof(struct mppa_trace_timestamp_hw_enable) == 4)*2-1];// If this fails, then the size of struct mppa_trace_timestamp_hw_enable as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_TRACE_TIMESTAMP_HW_ENABLE_TIMESTAMP_HW_ENABLE__SHIFT 0
#define MPPA_TRACE_TIMESTAMP_HW_ENABLE_TIMESTAMP_HW_ENABLE__MASK 0x1UL


/***
 * trace timestamp_hw_enable register definition
 * Timestamp_hw enable register.
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 4 bytes)
 * Reset value: 0x0
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
struct mppa_trace_timestamp_hw_enable _;
} mppa_trace_timestamp_hw_enable_t;

/***
 * trace device definition
 * Coolidge system TRACE
 *
 * Size: 524352/0x80040 bytes
 */
#define MPPA_TRACE_ETB_ENTRY_NUMBER 32768
typedef struct  {
mppa_trace_etb_entry_t etb_entry[32768]; /* offset: 0x0, size: 0x40000 ( /!\ this is a 64bits register*/
mppa_uint8 unused0[262144];
mppa_trace_timestamp_value_t timestamp_value; /* offset: 0x80000, size: 0x8 */
mppa_trace_timestamp_wrap_t timestamp_wrap; /* offset: 0x80008, size: 0x4 */
mppa_trace_timestamp_format_t timestamp_format; /* offset: 0x8000C, size: 0x4 */
mppa_trace_formatter_enable_t formatter_enable; /* offset: 0x80010, size: 0x4 */
mppa_trace_formatter_flush_t formatter_flush; /* offset: 0x80014, size: 0x4 */
mppa_trace_low_speed_trace_mode_t low_speed_trace_mode; /* offset: 0x80018, size: 0x4 */
mppa_trace_high_speed_bit_ordering_t high_speed_bit_ordering; /* offset: 0x8001C, size: 0x4 */
mppa_trace_etb_control_t etb_control; /* offset: 0x80020, size: 0x4 */
mppa_trace_etb_head_pointer_t etb_head_pointer; /* offset: 0x80024, size: 0x4 */
mppa_trace_etb_tail_pointer_t etb_tail_pointer; /* offset: 0x80028, size: 0x4 */
mppa_trace_etb_watermark_pointer_t etb_filling_thresh; /* offset: 0x8002C, size: 0x4 */
mppa_trace_etb_wmark_it_t etb_wmark_it; /* offset: 0x80030, size: 0x4 */
mppa_trace_trace_sw_hw_sel_t trace_sw_hw_sel; /* offset: 0x80034, size: 0x4 */
mppa_trace_formatter_flush_hw_t formatter_flush_hw; /* offset: 0x80038, size: 0x4 */
mppa_trace_timestamp_hw_enable_t timestamp_hw_enable; /* offset: 0x8003C, size: 0x4 */
} mppa_trace_t;

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_mppa_trace_t[(sizeof(mppa_trace_t) == 524352)*2-1];// If this fails, then the size of mppa_trace_t as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#endif // _INCLUDED_DEVICES_TRACE_COOLIDGE_V2_DEV_

/* -*- Mode: C; c-basic-offset: 2 -*- */
/* vim:set ft=c sw=2 cindent: */
