/*
 * secure_cluster_regs.coolidge-v1.dev
 * Automatically generated from registers definition files. Do not edit
 * Copyright (c) Kalray 2024.
 */

#ifndef _INCLUDED_DEVICES_SECURE_CLUSTER_REGS_COOLIDGE_V1_DEV_
#define _INCLUDED_DEVICES_SECURE_CLUSTER_REGS_COOLIDGE_V1_DEV_

#include "device_inttype.h"


struct mppa_secure_cluster_regs_secure_boot_view {
mppa_uint32 config :2; /*[ 1: 0]reset: 0x1,behavior: [:RD, :WR],Secure boot config, only value 1 or 2 can be written else trap*/
mppa_uint32 reserved_1:30;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_secure_cluster_regs_secure_boot_view[(sizeof(struct mppa_secure_cluster_regs_secure_boot_view) == 4)*2-1];// If this fails, then the size of struct mppa_secure_cluster_regs_secure_boot_view as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_SECURE_CLUSTER_REGS_SECURE_BOOT_VIEW_CONFIG__SHIFT 0
#define MPPA_SECURE_CLUSTER_REGS_SECURE_BOOT_VIEW_CONFIG__MASK 0x3UL


/***
 * secure_cluster_regs secure_boot_reg register definition
 * Secure boot register
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 1 byte)
 * Reset value: 0x1
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
mppa_uint16 hword[2];
mppa_uint8 bword[4];
struct mppa_secure_cluster_regs_secure_boot_view _;
} mppa_secure_cluster_regs_secure_boot_reg_t;

struct mppa_secure_cluster_regs_crypto_acc_view {
mppa_uint32 config :2; /*[ 1: 0]behavior: [:RD, :WR],Crypto accelerator config*/
mppa_uint32 reserved_1:30;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_secure_cluster_regs_crypto_acc_view[(sizeof(struct mppa_secure_cluster_regs_crypto_acc_view) == 4)*2-1];// If this fails, then the size of struct mppa_secure_cluster_regs_crypto_acc_view as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_SECURE_CLUSTER_REGS_CRYPTO_ACC_VIEW_CONFIG__SHIFT 0
#define MPPA_SECURE_CLUSTER_REGS_CRYPTO_ACC_VIEW_CONFIG__MASK 0x3UL


/***
 * secure_cluster_regs crypto_acc_reg register definition
 * Crypto accelerator register
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 1 byte)
 * Reset value: Not initialized
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
mppa_uint16 hword[2];
mppa_uint8 bword[4];
struct mppa_secure_cluster_regs_crypto_acc_view _;
} mppa_secure_cluster_regs_crypto_acc_reg_t;

struct mppa_secure_cluster_regs_secure_mst_config_view {
mppa_uint32 pe :16; /*[15: 0]reset: 0xFFFF,behavior: [:RD, :WR],PEs are secure*/
mppa_uint32 rm :1; /*[16:16]reset: 0x1,behavior: [:RD],RM is always secure (RO)*/
mppa_uint32 dsu :1; /*[17:17]reset: 0x1,behavior: [:RD, :WR],DSU is secure*/
mppa_uint32 cacc_0 :1; /*[18:18]reset: 0x1,behavior: [:RD, :WR],Crypto0 is secure*/
mppa_uint32 cacc_1 :1; /*[19:19]reset: 0x1,behavior: [:RD, :WR],Crypto1 is secure*/
mppa_uint32 axi_wr :1; /*[20:20]reset: 0x1,behavior: [:RD, :WR],AXI Write is secure*/
mppa_uint32 axi_rd :1; /*[21:21]reset: 0x1,behavior: [:RD, :WR],AXI Read is secure*/
mppa_uint32 dma_tx :1; /*[22:22]reset: 0x1,behavior: [:RD, :WR],DMA Tx is secure*/
mppa_uint32 dma_rx :1; /*[23:23]reset: 0x1,behavior: [:RD, :WR],DMA Rx is secure*/
mppa_uint32 reserved_1:8;
};

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_struct_mppa_secure_cluster_regs_secure_mst_config_view[(sizeof(struct mppa_secure_cluster_regs_secure_mst_config_view) == 4)*2-1];// If this fails, then the size of struct mppa_secure_cluster_regs_secure_mst_config_view as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_PE__SHIFT 0
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_PE__MASK 0xffffUL
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_RM__SHIFT 16
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_RM__MASK 0x10000UL
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_DSU__SHIFT 17
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_DSU__MASK 0x20000UL
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_CACC_0__SHIFT 18
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_CACC_0__MASK 0x40000UL
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_CACC_1__SHIFT 19
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_CACC_1__MASK 0x80000UL
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_AXI_WR__SHIFT 20
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_AXI_WR__MASK 0x100000UL
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_AXI_RD__SHIFT 21
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_AXI_RD__MASK 0x200000UL
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_DMA_TX__SHIFT 22
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_DMA_TX__MASK 0x400000UL
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_DMA_RX__SHIFT 23
#define MPPA_SECURE_CLUSTER_REGS_SECURE_MST_CONFIG_VIEW_DMA_RX__MASK 0x800000UL


/***
 * secure_cluster_regs secure_mst_config_reg register definition
 * Secure master config
 *
 * Permissions:
 * RM: ker => [:RD, :WR],
 * RM: usr => [:RD, :WR],
 * PE: ker => [:RD, :WR],
 * PE: usr => [:RD, :WR],
 * Size: 4 bytes (min access size = 1 byte)
 * Reset value: 0xFFFFFF
 */
typedef union {
mppa_uint32 reg;
mppa_uint32 word;
mppa_uint16 hword[2];
mppa_uint8 bword[4];
struct mppa_secure_cluster_regs_secure_mst_config_view _;
} mppa_secure_cluster_regs_secure_mst_config_reg_t;

/***
 * secure_cluster_regs device definition
 * Coolidge secure registers in a cluster
 *
 * Size: 20/0x14 bytes
 */
typedef struct  {
mppa_secure_cluster_regs_secure_boot_reg_t secure_boot_reg; /* offset: 0x0, size: 0x4 */
mppa_secure_cluster_regs_crypto_acc_reg_t crypto_acc_reg_0; /* offset: 0x4, size: 0x4 */
mppa_secure_cluster_regs_crypto_acc_reg_t crypto_acc_reg_1; /* offset: 0x8, size: 0x4 */
mppa_uint8 unused0[4];
mppa_secure_cluster_regs_secure_mst_config_reg_t secure_mst_config_reg; /* offset: 0x10, size: 0x4 */
} mppa_secure_cluster_regs_t;

#ifndef KVX_DISABLE_TYPECHECK
typedef char assertion_for_mppa_secure_cluster_regs_t[(sizeof(mppa_secure_cluster_regs_t) == 20)*2-1];// If this fails, then the size of mppa_secure_cluster_regs_t as created by the compiler does not match the hardware size.

#endif /* KVX_DISABLE_TYPECHECK */
#endif // _INCLUDED_DEVICES_SECURE_CLUSTER_REGS_COOLIDGE_V1_DEV_

/* -*- Mode: C; c-basic-offset: 2 -*- */
/* vim:set ft=c sw=2 cindent: */
